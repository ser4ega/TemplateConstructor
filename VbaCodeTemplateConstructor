Function SheetExist(ShName As String) As Boolean
    Dim mySheet     As Worksheet
    On Error Resume Next
    Set mySheet = Sheets(ShName)
    SheetExist = Not mySheet Is Nothing
End Function
Sub run_test()
    
    If Not SheetExist("TestSheetName") Then
        Sheets.Add.Name = "TestSheetName"
    End If
    ' test ("??????_?????_?????2021")
    'Debug.Print Cells(1, 1)
    
End Sub

Sub writeToModule(str As String)
    ActiveWorkbook.VBProject.VBComponents("NewModuleTest").CodeModule.AddFromString str
End Sub
'Sub test(sheetName As String)
Sub test()
    run_test        'создаем лист
    tests        'создаем модуль 'или очищаем созданный
    Dim sheetName   As String
    sheetName = "шаблон_титул2020"
    Dim origSh      As Worksheet
    Set origSh = Sheets(sheetName)
    Dim lastRow     As Integer
    Dim lastCol     As Integer
    'lastRow = origSh.Cells(Rows.Count, 1).End(xlUp).Row
    'lastCol = origSh.Cells(1, Columns.Count).End(xlToLeft).Column
    lastRow = 65
    lastCol = 120
    Dim chunkSize As Integer
    chunkSize = 1
    Dim proxyStr    As String
    Dim Rg          As Range
    Dim pixels      As Integer
    Dim points      As Single
    With Sheets(sheetName)
        
        writeToModule "       'sub part0() 'Раскомментить перед запуском"
        writeToModule "        'With Sheets(" & """TestSheetName""" & ")"
        For Cl = 1 To lastCol
            pixels = ColumnWidthToPixels(.Columns(Cl).ColumnWidth, origSh)
            points = PixelsToColumnWidth(pixels, origSh)
            proxyStr = "        '.Columns(" & Cl & ").ColumnWidth = " & CStr(points)
            proxyStr = Replace(proxyStr, ",", ".")
            'Debug.Print proxyStr
            writeToModule proxyStr
        Next Cl
        
        For Rw = 1 To lastCol
            proxyStr = "        '.Rows(" & Rw & ").EntireRow.RowHeight = " & .Rows(Rw).Height
            proxyStr = Replace(proxyStr, ",", ".")
            'Debug.Print proxyStr
            writeToModule proxyStr
        Next Rw
        
        'Rg = Sheets(sheetName).Range(Cells(1, 1), Cells(lastRow, lastCol))
        Dim newSub As Boolean
        newSub = False
        Dim LastClInMerge As Integer
        Dim LastRwInMerge As Integer
        Dim lines()
        lines = Array(xlDiagonalDown, xlDiagonalDown, xlDiagonalUp, xlEdgeLeft, xlEdgeTop, xlEdgeBottom, xlEdgeRight, xlInsideVertical, xlInsideHorizontal)
        For Rw = 1 To lastCol
            If Rw Mod chunkSize = 0 Then
                writeToModule "        'End With"
                writeToModule "        'End sub"
                writeToModule "        'sub part" & CStr(Rw \ chunkSize) & "()"
                    writeToModule "        'With Sheets(" & """TestSheetName""" & ")"
                End If
            For Cl = 1 To lastCol
                
                '                If .Cells(Rw, Cl).Value <> "" Then
                '                    Debug.Print ".Cells(" & Rw & "," & Cl & ").Value = " & .Cells(Rw, Cl).Value
                '                End If
                'MergeArea.Column, MergeAreaRow  -
                'MergeCells = True or False
                
                ' мерджим только для левой верхней
                
                
                
                If .Cells(Rw, Cl).MergeCells = True _
                   And .Cells(Rw, Cl).MergeArea.Column = Cl _
                   And .Cells(Rw, Cl).MergeArea.Row = Rw Then
                    LastClInMerge = Cl + .Cells(Rw, Cl).MergeArea.Columns.Count - 1
                    LastRwInMerge = Rw + .Cells(Rw, Cl).MergeArea.Rows.Count - 1
                    
                    writeToModule "        'Range(Cells(" & Rw & "," & Cl & "), Cells(" & LastRwInMerge & "," & LastClInMerge & ")).Select"
                    writeToModule "       'With Selection"
                    writeToModule "        '.HorizontalAlignment = xlCenter"
                    writeToModule "        '.VerticalAlignment = xlBottom"
                    writeToModule "        '.WrapText = False"
                    writeToModule "        '.Orientation = 0"
                    writeToModule "        '.AddIndent = False"
                    writeToModule "       '.IndentLevel = 0"
                    writeToModule "       '.ShrinkToFit = False"
                    writeToModule "       '.ReadingOrder = xlContext"
                    writeToModule "        '.MergeCells = False"
                    writeToModule "        'End With"
                    writeToModule "       'Selection.Merge"
                
                End If
            
            If .Cells(Rw, Cl).Value <> "" Then
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ") = " & """" & .Cells(Rw, Cl).Value & """"
                writeToModule " 'With .Cells(" & Rw & ", " & Cl & ")"
                If IsNull(.Cells(Rw, Cl).Font.Background) Then
                    writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Background = Null"
                Else
                    writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Background =" & .Cells(Rw, Cl).Font.Background
                End If
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Bold =" & .Cells(Rw, Cl).Font.Bold
                'writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Color =" & .Cells(Rw, Cl).Font.Color
                'writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.ColorIndex =" & .Cells(Rw, Cl).Font.ColorIndex
                'writeToModule " '.Cells(" & Rw & ", " & Cl & ").Font.Creator =" & .Cells(Rw, Cl).Font.Creator
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.FontStyle =" & """" & .Cells(Rw, Cl).Font.FontStyle & """"
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Italic =" & .Cells(Rw, Cl).Font.Italic
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Name =" & """" & .Cells(Rw, Cl).Font.Name & """"
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.OutlineFont =" & .Cells(Rw, Cl).Font.OutlineFont
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Shadow =" & .Cells(Rw, Cl).Font.Shadow
                If .Cells(Rw, Cl).Font.Size <> "" Then
                    proxyStr = "        '.Cells(" & Rw & ", " & Cl & ").Font.Size =" & Replace(.Cells(Rw, Cl).Font.Size, ",", ".")
                    writeToModule proxyStr
                End If
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Strikethrough =" & .Cells(Rw, Cl).Font.Strikethrough
                If .Cells(Rw, Cl).Font.Subscript <> "" Then writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Subscript =" & .Cells(Rw, Cl).Font.Subscript
                If .Cells(Rw, Cl).Font.Superscript <> "" Then writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Superscript =" & .Cells(Rw, Cl).Font.Superscript
                'writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.ThemeColor =" & .Cells(Rw, Cl).Font.ThemeColor
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.ThemeFont =" & .Cells(Rw, Cl).Font.ThemeFont
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.TintAndShade =" & .Cells(Rw, Cl).Font.TintAndShade
                writeToModule "        '.Cells(" & Rw & ", " & Cl & ").Font.Underline =" & .Cells(Rw, Cl).Font.Underline
                writeToModule " 'End With"
            End If
                'границы
                With .Cells(Rw, Cl)
                    'lines = Array(xlDiagonalDown, xlDiagonalDown, xlDiagonalUp, xlEdgeLeft, xlEdgeTop, xlEdgeBottom, xlEdgeRight, xlInsideVertical, xlInsideHorizontal)
                    For Each BorderDirection In lines
                        If .Borders(BorderDirection).LineStyle <> xlNone Then

                         writeToModule " 'With .Cells(" & Rw & ", " & Cl & ").Borders(" & BorderDirection & ")"

                            With .Borders(BorderDirection)
                                writeToModule " '.LineStyle = " & .LineStyle
                                'writeToModule " '.ColorIndex = " & .ColorIndex
                                'writeToModule " '.TintAndShade = " & .TintAndShade
                                writeToModule " '.Weight = " & .Weight
                            End With

                          writeToModule " 'End With"

                        End If
                    Next
                End With
            
            
            
            
        Next Cl
    Next Rw
    
    writeToModule "        'End With"
    writeToModule "       'end sub"
    
    ' запуск всех процедур
    writeToModule "        'sub main_run"
    writeToModule "     'call part0"
    For Rw = 1 To lastCol
        If Rw Mod chunkSize = 0 Then
                writeToModule "        'Call part" & CStr(Rw \ chunkSize) & "()"
        End If
    Next Rw
    writeToModule "       'end sub"
End With
End Sub
Sub SDSFhjSDF()
    With Cells(23, 24)
        Dim lines()
                    lines = Array(xlDiagonalDown, xlDiagonalDown, xlDiagonalUp, xlEdgeLeft, xlEdgeTop, xlEdgeBottom, xlEdgeRight, xlInsideVertical, xlInsideHorizontal)
                    For Each BorderDirection In lines
                        If .Borders(BorderDirection).LineStyle <> xlNone Then Debug.Print "hi"
                    Next
    End With
End Sub

Sub CreateNewModule(ByVal moduleTypeIndex As Integer, ByVal NewModuleName As String)
    Dim ModuleComponent As VBComponent
    On Error GoTo create_point
    Set ModuleComponent = ActiveWorkbook.VBProject.VBComponents(NewModuleName)
    ModuleComponent.CodeModule.DeleteLines 1, ModuleComponent.CodeModule.CountOfLines        'стка модуля
    Exit Sub
create_point:
    
    Set ModuleComponent = ActiveWorkbook.VBProject.VBComponents.Add(moduleTypeIndex)
    If Not ModuleComponent Is Nothing Then ModuleComponent.Name = NewModuleName
    
    On Error GoTo 0
    Set ModuleComponent = Nothing
    
End Sub
Sub tests()
    Call CreateNewModule(1, "NewModuleTest")
    Dim ModuleComponent As CodeModule
End Sub
Function setColWidth(PixelSize) As Double
    If PixelSize <= 12 Then
        setColWidth = PixelSize / 12
    Else
        setColWidth = 1 + (PixelSize - 12) / 12
    End If
End Function

Function ColumnWidthToPixels(ByVal ColWidth As Single, Sh As Worksheet) As Integer
    Select Case Round(ColWidth, 4)
        Case Is < 0:
            ColumnWidthToPixels = ColumnWidthToPixels(Sh.StandardWidth, Sh)
        Case Is < 1:
            ColumnWidthToPixels = Round(ColWidth * 12, 0)
        Case Is <= 255:
            ColumnWidthToPixels = Round(12 + ((Int(ColWidth) - 1) * 7) _
                                + Round((ColWidth - Int(ColWidth)) * 7, 0), 0)
        Case Else:
            ColumnWidthToPixels = ColumnWidthToPixels(Sh.StandardWidth, Sh)
    End Select
End Function

Function PixelsToColumnWidth(ByVal pixels As Integer, Sh As Worksheet) As Single
    Select Case pixels
        Case Is < 0:
            PixelsToColumnWidth = Sh.StandardWidth
        Case Is < 12:
            PixelsToColumnWidth = Round(pixels / 12, 2)
        Case Is <= 1790:
            PixelsToColumnWidth = Round(1 + ((pixels - 12) / 7), 2)
        Case Else:
            PixelsToColumnWidth = Sh.StandardWidth
    End Select
End Function



